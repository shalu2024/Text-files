CSS Selectors:

1. Simple selectors (select elements based on name, id, class)
	* The CSS element Selector : The element selector selects HTML elements based on the element name.
	   Here, all <p> elements on the page will be center-aligned, with a red text color: 
		p {
 			text-align: center;
  			color: red;
		}
	* The CSS id Selector : The id selector uses the id attribute of an HTML element to select a specific element.The id of an element is unique within a page, so the id selector is used to select one unique element. To select an element with a specific id, write a hash (#) character, followed by the id of the element.
	   The CSS rule below will be applied to the HTML element with id="para1": 
		#para1 {
  			text-align: center;
  			color: red;
		}
	* The CSS class Selector : The class selector selects HTML elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the class name.
	   In this example all HTML elements with class="center" will be red and center-aligned: 

		.center {
  			text-align: center;
  			color: red;
		}
	* The CSS Universal Selector : The universal selector (*) selects all HTML elements on the page.
	   The CSS rule below will affect every HTML element on the page: 
		* {
  			text-align: center;
  			color: blue;
		}
	* The CSS Grouping Selector : The grouping selector selects all the HTML elements with the same style definitions. Look at the following CSS code (the h1, h2, and p elements have the same style definitions):
	   	h1, h2, p {
  			text-align: center;
  			color: red;
		}


2. Combinator selectors (select elements based on a specific relationship between them)
	 * Descendant Selector : The descendant selector matches all elements that are descendants of a specified element. The following example selects all <p> elements inside <div> elements: 
		div p {
  			background-color: yellow;
		}
	* Child Selector (>) : The child selector selects all elements that are the children of a specified element. The following example selects all <p> elements that are children of a <div> element:	
		div > p {
  			background-color: yellow;
		}	
	* Adjacent Sibling Selector (+) : The adjacent sibling selector is used to select an element that is directly after another specific element. Sibling elements must have the same parent element, and "adjacent" means "immediately following". The following example selects the first <p> element that are placed immediately after <div> elements:
		div + p {
  			background-color: yellow;
		}
	* General Sibling Selector (~) : The general sibling selector selects all elements that are next siblings of a specified element. The following example selects all <p> elements that are next siblings of <div> elements: 
		div ~ p {
  			background-color: yellow;
		}

3. Pseudo-class selectors (select elements based on a certain state) :A pseudo-class is used to define a special state of an element.
	For example, it can be used to:
		* Style an element when a user mouses over it
		* Style visited and unvisited links differently
		* Style an element when it gets focus
	The syntax of pseudo-classes:
		selector:pseudo-class {
  			property: value;
		}
a:link {
  color: #FF0000;
}

/* visited link */
a:visited {
  color: #00FF00;
}

/* mouse over link */
a:hover {
  color: #FF00FF;
}

/* selected link */
a:active {
  color: #0000FF;
}
a.highlight:hover {
  color: #ff0000;
}
div:hover {
  background-color: blue;
}
	
4. Pseudo-elements selectors (select and style a part of an element) : A CSS pseudo-element is used to style specified parts of an element. For example, it can be used to:
		* Style the first letter, or line, of an element
		* Insert content before, or after, the content of an element
		* Syntax : The syntax of pseudo-elements:
			selector::pseudo-element {
  				property: value;
			}
	* The ::first-line Pseudo-element : The ::first-line pseudo-element is used to add a special style to the first line of a text. The following example formats the first line of the text in all <p> elements:
		p::first-line {
  			color: #ff0000;
  			font-variant: small-caps;
		}
	* The ::first-letter Pseudo-element : The ::first-letter pseudo-element is used to add a special style to the first letter of a text. The following example formats the first letter of the text in all <p> elements: 
		p::first-letter {
  			color: #ff0000;
  			font-size: xx-large;
		}
	* Multiple Pseudo-elements : Several pseudo-elements can also be combined. In the following example, the first letter of a paragraph will be red, in an xx-large font size. The rest of the first line will be blue, and in small-caps. The rest of the paragraph will be the default font size and color:
		p::first-letter {
  			color: #ff0000;
  			font-size: xx-large;
		}
		p::first-line {
  			color: #0000ff;
  			font-variant: small-caps;
		}
	* CSS - The ::before Pseudo-element : The ::before pseudo-element can be used to insert some content before the content of an element. The following example inserts an image before the content of each <h1> element:
		h1::before {
  			content: url(smiley.gif);
		}
	* CSS - The ::after Pseudo-element : The ::after pseudo-element can be used to insert some content after the content of an element. The following example inserts an image after the content of each <h1> element:
		h1::after {
  			content: url(smiley.gif);
		}
	* CSS - The ::marker Pseudo-element : The ::marker pseudo-element selects the markers of list items.The following example styles the markers of list items:
		::marker {
  			color: red;
  			font-size: 23px;
		}
	* CSS - The ::selection Pseudo-element : The ::selection pseudo-element matches the portion of an element that is selected by a user. The following CSS properties can be applied to ::selection: color, background, cursor, and outline. The following example makes the selected text red on a yellow background:
		::selection {
  			color: red;
  			background: yellow;
		}

5. Attribute selectors (select elements based on an attribute or attribute value)
	* CSS [attribute] Selector : The [attribute] selector is used to select elements with a specified attribute. The following example selects all <a> elements with a target attribute:
		a[target] {
  			background-color: yellow;
		}
	* CSS [attribute="value"] Selector : The [attribute="value"] selector is used to select elements with a specified attribute and value. The following example selects all <a> elements with a target="_blank" attribute:
		a[target="_blank"] {
  			background-color: yellow;
		}
	* CSS [attribute~="value"] Selector : The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word. The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":
		[title~="flower"] {
  			border: 5px solid yellow;
		}
	* CSS [attribute|="value"] Selector : The [attribute|="value"] selector is used to select elements with the specified attribute, whose value can be exactly the specified value, or the specified value followed by a hyphen (-).
		[class|="top"] {
  			background: yellow;
		}
	* CSS [attribute^="value"] Selector : The [attribute^="value"] selector is used to select elements with the specified attribute, whose value starts with the specified value. The following example selects all elements with a class attribute value that starts with "top":
		[class^="top"] {
  			background: yellow;
		}
	* CSS [attribute$="value"] Selector : The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value. The following example selects all elements with a class attribute value that ends with "test":
		[class$="test"] {
  			background: yellow;
		}
	* CSS [attribute*="value"] Selector : The [attribute*="value"] selector is used to select elements whose attribute value contains a specified value. The following example selects all elements with a class attribute value that contains "te":
		[class*="te"] {
 			 background: yellow;
		}